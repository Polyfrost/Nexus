---
import languages from '~/i18n/languages';
import type { UILanguageKeys } from '~/i18n/translation';
import { useTranslationsForLang } from '~/i18n/utils';

const defaultLang = 'en';
const t = useTranslationsForLang(defaultLang);

const dictionary = Object.fromEntries(
	Object.keys(languages).map((_lang) => {
		const lang = _lang as UILanguageKeys;
		const t = useTranslationsForLang(lang);
		return [lang, { p: t('404.content'), a: t('404.linkText') }];
	}),
);
---

<div class="wrapper">
	<four-oh-four data-dictionary={JSON.stringify(dictionary)}>
		<div class="hero-text">
			<h1>404</h1>
			<p>{t('404.content')}</p>
			<a href={`/${defaultLang}/`}>{t('404.linkText')}</a>
		</div>
	</four-oh-four>
</div>

<style is:global>
	main .content-panel:first-child {
		display: none;
	}
</style>
<style>
	.wrapper {
		margin: -1.5rem calc(-1 * var(--sl-content-pad-x));
		padding-block: 1.5rem;
		display: grid;
		grid-template: 100% / 100%;
		overflow: hidden;
	}
	.wrapper > * {
		grid-column: 1 / -1;
		grid-row: 1 / -1;
		place-self: center;
	}
	.hero-text {
		text-align: center;
		padding: 0 1rem;
		color: hsl(224, 6%, 77%);
	}
	.hero-text h1 {
		font-size: 6rem;
		color: white;
	}
	.hero-text p {
		font-size: var(--sl-text-xl);
	}

	:global([data-theme='light']) a,
	:global([data-theme='light']) a:hover {
		color: white;
	}

	@keyframes float-mobile {
		50% {
			transform: translate(0, -12.25rem) rotate(3deg);
		}
	}
	@keyframes float {
		50% {
			transform: translate(-20rem, -0.25rem) rotate(3deg);
		}
	}
</style>

<script>
	window.addEventListener('load', () => (window as any).fathom.trackGoal('4KN9VI2W', 0));
</script>

<script is:inline>
class FourOhFour extends HTMLElement {
	constructor() {
		super();
		try {
			if (!this.dataset.dictionary)
				return;
			const dictionary = JSON.parse(this.dataset.dictionary);
			const languages = Object.keys(dictionary);

			const langCodeMatch = location.pathname.match(`/(${languages.join('|')})/`);
			const lang = langCodeMatch ? langCodeMatch[1] : 'en';

			const a = this.querySelector('a');
			a.pathname = `/${lang}/`;

			const translations = dictionary[lang];
			for (const key in translations)
				this.querySelector(key).textContent = translations[key];

			const bcp47 = lang.slice(0, 3) + lang.slice(3, 5).toUpperCase();
			this.setAttribute('lang', bcp47);
		}
		catch { /* igore */ }
	}
}
customElements.define('four-oh-four', FourOhFour);
</script>

<script is:inline>
	(() => {
		const language = location.pathname.split('/').at(1);
		const cssSelector = `starlight-lang-select option[value^="/${language}/"]`;
		const matchedLanguageOption = document.querySelector(cssSelector);
		if (matchedLanguageOption?.parentElement)
			matchedLanguageOption.parentElement.value = matchedLanguageOption.value;
	})();
</script>
